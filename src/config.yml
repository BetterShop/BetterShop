## BetterShop Configuration file ##
################################### 

errors:
    # at start, will tell you if this plugin is the current version
    CheckForUpdates: true
    # should updates be downloaded automatically? (note: deletes the old version)
    AutoUpdate: false
    # as an attempt to stay on top of any bugs, error reports can be sent to notify me of a potential bug
    # (all information is confidential, and no private information is sent)
    # an error id is generated & outputted to the log, and can be viewed at ftp://nas.boldlygoingnowhere.org/youridhere
    #note: this helps, but is not self-explanitory when trying to track down a bug
    #     if you're having problems, please post at http://forums.bukkit.org/threads/3359/
    #     with the id & the steps you used to get there
    AutoErrorReporting: true
    # share your server ip (unhashed) with the devs?
    #   (if true, means you don't mind us coming over for a visit)
    UnMaskErrorID: false
    # if you want to send a custom message with your error report
    #   ex: email for me to contact you for more info about an error
    #       info about your server (installed plugins?)
    # note: message cannot be longer than 90 characters
    # (this is not displayed to the user, it is sent in the error report)
    CustomErrorMessage: ""

    #if you're using jascotty2's MinecraftIM plugin, should errors be sent to you?
    sendLogOnError: true
    #send everything logged? (not just errors & exceptions)
    sendAllLog: false


shop:
    # number of lines outputted in shop list
    ItemsPerPage: 9
    # broadcast all transactions publicly?
    publicmarket: false

    #item buying behavior
    #if someone without BetterShop.admin.illegal can buy illegal items
    allowbuyillegal: true
    #whether maxstack should be honored
    # if false, all items can be purchased stacked to 64
    usemaxstack: true
    #used tools can be bought back?
    buybacktools: true
    #should the shop buy items from users?
    buybackenabled: true
    #if there are LivingEntities for sale, what's the max that can be bought at once?
    # (does not limit total, if buy repeatedly)
    maxEntityPurchase: 3

    # sign based shops enabled?
    signShops: true
    # color of an active sign's ttle
    activeSignColor: blue
    # color the names of items on signs?
    signItemColor: false
    # swap black & white item colors?
    signItemColorBWswap: false
    # don't allow signs to be destroyed by unauthorized players?
    signDestroyProtection: true
    # scan for destroyed signs?
    tntSignDestroyProtection: false
    # command-based shop mode
    # modes: global, disabled (default: global)
    commandShop: global
    #items listed here will be sorted before everything else, in this order
    # ex:  4, 35, 35:1, 35:2, 35:3, 35:4, 35:5, 8, 2
    # (can also use item names)
    customsort:

    #what color to reset text to after printing an item with a custom color
    #   black, dark blue, dark green, dark sky blue, red, magenta, gold or amber, light grey
    #   dark grey, medium blue, light green, cyan, orange-red, pink, yellow, white
    defaultItemColor: white

    # what to use for table/file name (files are saved as .csv)
    tablename: BetterShop

    #if using Help: should main commands not be listed on the main page?
    hideHelp: false

    # if using BOSEconomy, can set what bank will buy/sell items (optional)
    BOSBank:
    
    # default currency name (not yet used, but might be if no economy plugin found)
    currencyName: "Coin"


MySQL:
    #use MySQL for databases? (includes pricelist, marketActivity, transactionTotals, and itemStock)
    useMySQL: false

    # database to use in MySQL
    database: minecraft
    # MySQL Login Username
    username: root
    # MySQL Login Password
    password: root
    # MySQL Connection Hostname (IP)
    Hostname: localhost
    # MySQL Connection Port Number
    Port: 3306
    # Cache pricelist table?
    cache: true
    # max lifespan of a list cache
    #   positive integer values only, units being s(econds) m(inutes) h(hours) d(ays) w(eeks) M(onths) (default: h)
    #   0 = never update cache (use if you won't be editing the database outside of the plugin)
    #   if you don't want to have caching, you shoud still enable it & set this to something low, like 25 seconds
    # note: this also affects item stock caching, if enabled
    cacheUpdate: 5m
    # if cache is disabled, will hold a temp cache of the last item looked up
    #   (to lower database lookups & increase performance)
    #   use this to change how long it is considered current (seconds)
    tempCacheTTL: 10

# section for logging transactions (future can be used to make a dynamic market)
transactionLog:
    enabled: false
    # what to use for transaction log tablename (or flatfile flename)
    logtablename: BetterShopMarketActivity
    # max lifespan of an individual record
    #   positive integer values only, units being m(inutes) h(hours) d(ays) w(eeks) M(onths) (default: h)
    #   recommend not going too high, since the db could get pretty large
    #   (older records are removed when adding new ones)
    userTansactionLifespan: 2d

# besides logging individual transactions, can also record the totals for whole world
totalsTransactionLog:
    enabled: false
    logtablename: BetterShopTransactionTotals

dynamicMarket:
    # dynamic pricing not yet implemented..
    # when it is, will require transactionLog.enabled: true
    dynamicPricing: false

    # the following are not influenced if dynamicPricing is disabled
    
    #if a price is not set on a craftable item, can still sell if the materials to make are for sale
    sellcraftables: true

    # if sellcraftables, how much % more a crafted item costs than the materials
    #     (sell prices also reduced by this amount)
    sellcraftableMarkup: 5

    # if sellcraftables, if colored wool should sell for less than sellcraftableMarkup
    #   (otherwise, a player could buy dye, color a sheep, get 1-3 colored wool, make profit)
    woolsellweight: true

itemStock:
    # enable a stock for items?
    enabled: false
    # table/file name to use
    tablename: BetterShopItemStock
    #  how much an added item has to start with
    startStock: 200
    # max stock to carry (stock is increased with sales)
    #(cannot exceed  2^63-1, or 9,223,372,036,854,775,807)
    maxStock: 500
    # deny sales if stock is full?
    #   (if false, stock will not increase above maxStock.. it will just be thrown out)
    noOverStock: true
    # restock interval: automatic (on stock check, not timer), and stock will be reset to startStock value
    #   positive integer values only, units being m(inutes) h(hours) d(ays) w(eeks) M(onths) (default: h)
    #   0 == never restock
    # note: does not save the last update time, so a server restart could interfere with this cycle
    restock: 6h

##########################################
# strings section: Text used in messages #
##########################################
strings:

# In some strings below, you can use certain keys to represent
# dynamic fields that are filled in by the plugin. These keys are
# always in angle brackets "< >". I've tried to use as many of the
# allowable tags in each string as I can. Those that I couldn't use
# but are still valid are listed in the description following the
# string.
# 
#   For example, in the notforsale string, <item> is used to 
# represent the item that the user is trying to buy but can't.
# whenever using <item>, will output using a custom color is one is set for the item, 
# so it's a good idea to put a color formatting afterwards
# In this file the default for that line is:
# 
#   notforsale: "&f[<item>&f] &2is not for sale."
#
# In game, trying to buy wood while it's not in the shop would result
# in seeing this message:
#
#   SHOP: [wood] is not for sale.
#
###
#
# Colors are specified by using "&[colorcode]". Never put colors within
# the angle brackets of a tag!
#   Color table:
#       &0 is black
#       &1 is dark blue
#       &2 is dark green
#       &3 is dark sky blue
#       &4 is red
#       &5 is magenta
#       &6 is gold or amber
#       &7 is light grey
#       &8 is dark grey
#       &9 is medium blue
#       &a is light green
#       &b is cyan
#       &c is orange-red
#       &d is pink
#       &e is yellow
#       &f is white
#
# note on <item>: if you have custom item colors (there are some included)
#    you should have a default color after lising the item
#  Get it? Good. Now have fun.



#
# general messages
####

    prefix: "&fSHOP: &2"
    # prefix is what comes before each and EVERY BetterShop message. Putting default colors here makes things easy.

    permdeny: "OI! You don't have permission to do that!"
    # permdeny is the permission denied message. The key <perm> can be used to show the permission node that was checked.

    unkitem: "What is &f<item>&2?"
    # unkitem is the unknown item message.
    
    nicetry: "...Nice try!"
    # nicetry is shown when someone tries to beat the system. Like /shopbuy diamond 0.
    
#
# shopadd messages
####

    # paramerror indicates a syntax error when trying to add an item to the shop.
    paramerror: "Oops... something wasn't right there."
    
    # confirms a successful addition to the shop.
    # <item> - what was added
    # <buyprice> - current buy cost
    # <sellprice> - current sell value
    # <curr> - iConomy currency
    # <buycur> - formatted buy cost (like "1,800 Coins" instead of "1800 Coin")
    # <sellcur> - formatted sell value
    addmsg: "&f[<item>&f]&2 added to the shop. Buy: &f<buyprice>&2 Sell: &f<sellprice>"

    #when item is changed
    # <item> - what was changed
    # <buyprice> - updated buy cost
    # <sellprice> - updated sell value
    # <curr> - iConomy currency
    # <buycur> - formatted buy cost 
    # <sellcur> - formatted sell value
    chgmsg: "&f[<item>&f]&2 updated. Buy: &f<buyprice>&2 Sell: &f<sellprice>"
#
# shopremove messages
####

    # confirms a successful removal from the shop.  
    # <item> - what was removed
    removemsg: "&f[<item>&f]&2 removed from the shop"    
     
#
# shopcheck messages
####

    # pricecheck is what shows up when a player asks for a item lookup
    # <item> - what was looked up
    # <buyprice> - current buy cost
    # <sellprice> - current sell value
    # <curr> - iConomy currency
    # <max> - how much they can buy
    # <buycur> - formatted buy cost (like "1,800 Coins" instead of "1800 Coin")
    # <sellcur> - formatted sell value
    # <avail> - current avaliable stock (if enabled)
    pricecheck: "Price check! &f[<item>&f]&2 Buy: &f<buyprice> &2Sell: &f<sellprice>"
    #pricecheck: "Price check! &f[<item>&f]&2 Buy: &f<buyprice> &2Sell: &f<sellprice> (stock: <avail>)"

    # when amount is specified
    # <amt> - how many items looked up
    multipricecheck: "Price check! <amt> &f[<item>&f]&2 Buy: &f<buyprice> &2Sell: &f<sellprice>"
    # for signs
    multipricechecksell: "Price check! <amt> &f[<item>&f]&2 Sell: &f<sellcur>"

    multipricecheckbuy: "Price check! <amt> &f[<item>&f]&2 Buy: &f<buycur>"


    # message that the item is neither for sale nor can be sold.
    # <item> - what user is looking up
    nolisting: "&f[<item>&f] &2cannot be bought or sold."

#
# shoplist messages
####

    # top of a shop listing page (blank for none (not recommended))
    # <page> - current list page
    # <pages> - total # of pages
    listhead: "-------- Price-List Page: &f<page> &2of &f<pages> &2--------"

    # price listing message
    # <item> - what was looked up
    # <buyprice> - current buy cost
    # <sellprice> - current sell value
    # <curr> - iConomy currency
    # <avail> - current avaliable stock (if enabled)
    # using <r> will attempt to right-align preceeding text
    # using <l> will attempt to left-align preceeding text
    # using <c> will attempt to center (all) preceeding text
    # <r>,  <l>,  &  <c> will accept replacement chars: <r.> will right-align using . as spacer
    listing: "&f[<item>&f]&2 <l> Buy: &f<buyprice>&2  Sell: &f<sellprice>"
    #listing: "&f[<item>&f]&2 <l> Buy: &f<buyprice>&2  Sell: &f<sellprice> <l>(stock: <avail>)"

    # bottom of market list page (blank for none)
    listtail: "-----------------------------------------"

#
# messages related to stock
####
    
    #when an item cannot be bought because it is out of stock
    # <item> what tried to buy
    outofstock: "This item is currently out of stock"

    # when trying to buy more than is in stock (will then buy that much)
    # <item> what tried to buy
    # <amt>  how much is left in stock
    lowstock: "Only <amt> <item> &favaliable for purchase"
    
    # when trying to sell, but there is no more room in stock (and noOverStock)
    # <item> what tried to sell
    maxstock: "This item is currently at max stock"
    
    # when trying to sell, but there is not enough room in stock for all (and noOverStock)
    # <item> what tried to sell
    # <amt>  how much is in stock
    highstock: "Only <amt> can be sold back"
#
# shopbuy messages
####

    # the message shown when successfully buying
    # <amt> - how much bought
    # <item> - what was bought
    # <priceper> - current buy cost
    # <total> - total paid
    # <curr> - iConomy currency
    # <totcur> - formatted total (like "1,800 Coins" instead of "1800 Coin")
    buymsg: "Buying &f<amt> &2<item>&2 at &f<priceper> &2<curr> each... &f<total> &2<curr> total!"
    
    #public message is like buymsg, but shown to everyone (if enabled)
    # <player> - who bought from the store
    # <amt> - how much bought
    # <item> - what was bought
    # <priceper> - current buy cost
    # <total> - total paid
    # <curr> - iConomy currency
    # <totcur> - formatted total (like "1,800 Coins" instead of "1800 Coin")
    publicbuymsg: "<player> bought &f<amt> &2<item>&2 for &f<totcur>"
    

    # outofroom is displayed when someone tries to buy more items than they can carry.
    # <amt> - how much tried to buy
    # <item> - what tried to buy
    # <leftover> - how much can't fit into inventory
    # <free> - how much they can buy
    # (will then continue to buy <free>)
    outofroom: "You tried to buy &f<leftover>&2 too many.. you can only hold <free> <item>&2 more"

    # when someone tries to buy more than they can afford.
    # <amt> - how much tried to buy
    # <item> - what tried to buy
    # <priceper> - current buy cost
    # <total> - total owed
    # <max> - how much they can buy
    # <curr> - iConomy currency
    # <totcur> - formatted total (like "1,800 Coins" instead of "1800 Coin")
    insuffunds: "&4You don't have enough <curr>! &f<amt> &2<item> at &f<priceper> &2<curr> each = &c<total>"

    # when tries to sell something the shop won't buy
    # <item> - what tried to buy
    notforsale: "&f[<item>&f] &2cannot be bought"
    
    # if the item is not legal, and not given permissions to buy it
    illegalbuy: "&4you don't have permissions to buy &f[<item>&f]"
#
# shopsell messages
####

    # when the user tries to sell more than they have. 
    # <item> - what tried to sell
    # <hasamt> - how much user has
    # <amt> - how much user tried to sell
    # (after showing message, will then sell <hasamt>)
    donthave: "You only have <hasamt>, not <amt>"
    
    # when the user tries to sell something that's not for sale
    # <item> - what tried to sell
    donotwant: "&f[<item>&f] &2has no value to me. No thanks."

    # Successful sale
    # <amt> - how much sold
    # <item> - what was sold
    # <priceper> - sell value per item
    # <total> - total recieved
    # <curr> - iConomy currency
    # <totcur> - formatted total (like "1,800 Coins" instead of "1800 Coin") iConomy.getBank().format(
    sellmsg: "Selling &f<amt> &2<item>&2 at &f<priceper> &2<curr> each... &f<total> &2<curr> total!"

    #public message is like sellmsg, but shown to everyone (if enabled)
    # <player> - who bought from the store
    # <amt> - how much bought
    # <item> - what was bought
    # <priceper> - current buy cost
    # <total> - total paid
    # <curr> - iConomy currency
    # <totcur> - formatted total (like "1,800 Coins" instead of "1800 Coin")
    publicsellmsg: "<player> sold &f<amt> &2<item>&2 for &f<totcur>"
